import asyncio
import ebest
from common import *
from app_keys import appkey, appsecretkey # app_keys.py 파일에 appkey, appsecretkey 변수를 정의하고 사용하세요

import pandas as pd

'''
가장 표준 지표인 이동평균선을 이용한 매매 전략 백테스팅 샘플

1. 선물종목
    코스피200 연결지수선물 1계약 기준, 30분봉 데이터
    
2. 진입조건
    - 콜만 진입
    - 60 이평과 120 이평 정배열에서, 5 이평이 60 이평을 상향 돌파할 때 진입
    
3. 익절조건
    - 5pt(125만원) 이상 수익 에서 트레일링 스탑 작동 시작, 최대수익 대비 50% 수익감소시 트레일링 스탑 청산
    
4. 손절 및 청산 조건
    - 2pt(50만원) 이상 손실 발생시 청산
    - 5 이평과 20 이평 모두 60 이평 아래로 떨어질 때 청산
'''

async def main():
    api=ebest.OpenApi()
    if not await api.login(appkey, appsecretkey): return print(f'연결실패: {api.last_message}')
    
    shcode = '90199999' # 기본값, 연결선물지수

    # 30분봉 데이터를 불러올 수 있을때 까지 불러온다
    print(f'코스피200 연결선물 30분봉 데이터를 불러올 수 있을때 까지 불러옵니다...')
    df = await GetFutureMinuteChartData(api, shcode, 30, 10000)

    length = len(df)
    
    # 5일 이동평균선, 20일 이동평균선, 60일, 120일 이동평균선
    calc_df = pd.DataFrame()
    calc_df['일자'] = df['date']
    calc_df['시간'] = df['time']
    calc_df['종가'] = df['close']
    calc_df['고가'] = df['high']
    calc_df['저가'] = df['low']
    calc_df['ma5'] = df['close'].rolling(window=5).mean()
    calc_df['ma20'] = df['close'].rolling(window=20).mean()
    calc_df['ma60'] = df['close'].rolling(window=60).mean()
    calc_df['ma120'] = df['close'].rolling(window=120).mean()


    result_df = pd.DataFrame([], columns = ['진입명', '일자-시간', '진입가', '보유수량', '청산가', '청산수량', '청산손익(pt)', '누적손익(pt)'])

    누적손익 = 0
    보유수량 = 0
    진입가격 = 0
    진입횟수 = 0
    수익횟수 = 0
    수익누계 = 0
    손실누계 = 0
    진입당최대수익 = 0
    TS최대수익 = 0
    연속손실합계 = 0
    최대연속손실 = 0

    for i in range(120, length, 1):
        ma5 = calc_df['ma5'][i]
        ma20 = calc_df['ma20'][i]
        ma60 = calc_df['ma60'][i]
        ma120 = calc_df['ma120'][i]
        ma5_1 = calc_df['ma5'][i-1] # 이전봉 5 이동평균선
        ma60_1 = calc_df['ma60'][i-1] # 이전봉 60 이동평균선
        고가 = calc_df['고가'][i]
        저가 = calc_df['저가'][i]
        종가 = calc_df['종가'][i]
        일자 = calc_df['일자'][i]
        시간 = calc_df['시간'][i]
        일자_시간 = f'{일자}-{시간}'
            
        if 보유수량 == 0:
            # 진입 조건 체크
            if ma60 > ma120 and ma5_1 < ma60_1 and ma5 > ma60: # 60 이평과 120 이평 정배열, 5 이평이 60 이평을 상향돌파할 때
                # 신규 콜 진입
                진입횟수 += 1
                진입가격 = 종가
                보유수량 = 1
                진입당최대수익 = 0
                TS최대수익 = 0
                result_df.loc[-1] = ['콜 진입', 일자_시간, 진입가격, 보유수량, 0, 0, 0, round(누적손익,2)]
                result_df.index += 1
                pass
        else:
            청산가 = 종가
            청산손익 = (청산가 - 진입가격) * 보유수량
            최대수익 = ((고가 if 보유수량 > 0 else 저가) - 진입가격) * 보유수량
            if 최대수익 > 진입당최대수익: 진입당최대수익 = 최대수익
                
            청산명 = None

            if 보유수량 > 0 and ma5 < ma60 and ma20 < ma60: # 콜 청산 조건 체크: 5 이평과 20 이평 모두 60 이평 아래로 떨어질 때
                청산명 = '이평청산'
            else:
                if 청산손익 <= -2: # 손절
                    청산명 = '손절'
                elif TS최대수익 == 0:
                    if 최대수익 >= 5: TS최대수익 = 최대수익
                else:
                    if 최대수익 > TS최대수익: TS최대수익 = 최대수익
                    if 청산손익 <= TS최대수익 * 0.5: # 수익 절반 감소
                        청산명 = 'TS청산'

            if 청산명 is not None:
                누적손익 += 청산손익
                if 청산손익 > 0:
                    수익횟수 += 1
                    수익누계 += 청산손익
                    연속손실합계 = 0
                else:
                    손실누계 += 청산손익
                    연속손실합계 += 청산손익
                    if 연속손실합계 < 최대연속손실: 최대연속손실 = 연속손실합계
                        
                result_df.loc[-1] = [청산명, 일자_시간, 진입가격, 0, 청산가, 보유수량, round(청산손익, 2), round(누적손익,2)]
                result_df.index += 1
                보유수량 = 0
        pass
    
    최종평가포인트 = 누적손익 + (calc_df['종가'][length-1] - 진입가격) * 보유수량
    if 보유수량 == 0: 진입가격 = 0

    # 출력
    result_df.loc[-1] = ['최종평가', calc_df['일자'][length-1], 진입가격, 보유수량, 0, 0, 0, round(최종평가포인트, 2)]
    result_df.index += 1
    print_table(result_df)
        
    print(f'일자: {calc_df['일자'][120]}~{calc_df['일자'][length-1]}')
    print(f'총수익(pt): {round(수익누계, 2)}, 총손실(pt): {round(손실누계, 2)}, 최대연속손실(pt): {round(최대연속손실, 2)}')
    print(f'수익/진입 횟수: {수익횟수} / {진입횟수}, 승율: {round(수익횟수/진입횟수 * 100, 2)}%, 손익비: {round(수익누계 / (-손실누계), 2)}')
    print(f'최종평가손익(pt): {round(최종평가포인트, 2)}')
    print(f'최종평가손익(원): {int(최종평가포인트 * 250000):,}')
    print('')
   
    await api.close()


async def GetFutureMinuteChartData(api, code, ncnt, count):
    '''
    선물 차트 데이터 조회 함수
    api: ebest api 객체
    code: 선물 종목코드
    ncnt: 분봉주기 (1, 3, 5, 10, 15, 30, 45, 60)
    count: 조회할 데이터 건수
    gubun: 주기구분(2:일3:주4:월5:년), 기본값: 일
    return: DataFrame
    '''
    received_count = 0
    cts_date = ''
    cts_time = ''
    tr_cont = 'N'
    tr_cont_key = '0'
    all_data = []
    req_fram_count = 0
    while received_count < count:
        # 차트 데이터 조회
        req_fram_count += 1
        print (f'[{code}] 차트요청중...{req_fram_count}')
        req_count = min(500, count - received_count)
        # [요청] t8415 : 선물/옵션챠트(N분)
        request = {
            "t8415InBlock": {
                "shcode": code, # 종목코드
                "ncnt": ncnt, # N분
                "qrycnt": req_count, # 요청건수
                "nday": "", # 요청일자
                "sdate": "",
                "stime": "",
                "edate": "99999999",
                "etime": "999999",
                "cts_date": cts_date,
                "cts_time": cts_time,
                "comp_yn": "N",
            },
        }
        response = await api.request("t8415", request, tr_cont = tr_cont, tr_cont_key = tr_cont_key)
        if not response:
            print(f'요청실패: {api.last_message}')
            break
        
        data = response.body.get('t8415OutBlock1', None)
        if data is None: break
        
        all_data = data + all_data
        received_count = len(all_data)
        if received_count >= count:
            break
        cts_date = response.body['t8415OutBlock']['cts_date']
        cts_time = response.body['t8415OutBlock']['cts_time']
        tr_cont = response.tr_cont
        tr_cont_key = response.tr_cont_key
        if tr_cont == 'N': break
        await asyncio.sleep(1)
        pass
    
    # 날짜, 시간, 시가, 고가, 저가, 종가, 거래량 데이터로 변환
    return pd.DataFrame([list((x['date'], x['time'], float(x['open']), float(x['high']), float(x['low']), float(x['close']), float(x['jdiff_vol']))) for x in all_data]
                        , columns = ['date', 'time', 'open', 'high', 'low', 'close', 'volume'])

asyncio.run(main())

# Output:
'''
[90199999] 차트요청중...1
[90199999] 차트요청중...2
[90199999] 차트요청중...3
[90199999] 차트요청중...4
[90199999] 차트요청중...5
[90199999] 차트요청중...6
[90199999] 차트요청중...7
Row Count = 47
+----------+-----------------+--------+----------+--------+----------+--------------+--------------+
|  진입명  |    일자-시간    | 진입가 | 보유수량 | 청산가 | 청산수량 | 청산손익(pt) | 누적손익(pt) |
+----------+-----------------+--------+----------+--------+----------+--------------+--------------+
| 콜 진입  | 20230407-110000 | 324.8  |    1     |  0.0   |    0     |     0.0      |     0.0      |
| 이평청산 | 20230418-143000 | 324.8  |    0     | 334.15 |    1     |     9.35     |     9.35     |
| 콜 진입  | 20230418-154500 | 335.15 |    1     |  0.0   |    0     |     0.0      |     9.35     |
| 이평청산 | 20230420-130000 | 335.15 |    0     | 334.45 |    1     |     -0.7     |     8.65     |
| 콜 진입  | 20230511-110000 | 328.15 |    1     |  0.0   |    0     |     0.0      |     8.65     |
| 이평청산 | 20230511-123000 | 328.15 |    0     | 327.95 |    1     |     -0.2     |     8.45     |
| 콜 진입  | 20230526-113000 | 337.75 |    1     |  0.0   |    0     |     0.0      |     8.45     |
| 이평청산 | 20230601-150000 | 337.75 |    0     | 338.45 |    1     |     0.7      |     9.15     |
| 콜 진입  | 20230602-103000 | 340.95 |    1     |  0.0   |    0     |     0.0      |     9.15     |
| 이평청산 | 20230608-153000 | 340.95 |    0     | 342.3  |    1     |     1.35     |     10.5     |
| 콜 진입  | 20230609-093000 | 346.1  |    1     |  0.0   |    0     |     0.0      |     10.5     |
| 이평청산 | 20230615-100000 | 346.1  |    0     | 347.0  |    1     |     0.9      |     11.4     |
| 콜 진입  | 20230731-091500 | 347.1  |    1     |  0.0   |    0     |     0.0      |     11.4     |
|  TS청산  | 20230802-091500 | 347.1  |    0     | 350.0  |    1     |     2.9      |     14.3     |
| 콜 진입  | 20230828-101500 | 331.95 |    1     |  0.0   |    0     |     0.0      |     14.3     |
|  TS청산  | 20230830-154500 | 331.95 |    0     | 334.75 |    1     |     2.8      |     17.1     |
| 콜 진입  | 20231017-121500 | 328.75 |    1     |  0.0   |    0     |     0.0      |     17.1     |
|   손절   | 20231019-091500 | 328.75 |    0     | 324.6  |    1     |    -4.15     |    12.95     |
| 콜 진입  | 20231109-114500 | 326.8  |    1     |  0.0   |    0     |     0.0      |    12.95     |
| 이평청산 | 20231110-091500 | 326.8  |    0     | 323.4  |    1     |     -3.4     |     9.55     |
| 콜 진입  | 20231114-094500 | 328.25 |    1     |  0.0   |    0     |     0.0      |     9.55     |
| 이평청산 | 20231124-141500 | 328.25 |    0     | 335.55 |    1     |     7.3      |    16.85     |
| 콜 진입  | 20231128-111500 | 337.0  |    1     |  0.0   |    0     |     0.0      |    16.85     |
|   손절   | 20231129-094500 | 337.0  |    0     | 334.95 |    1     |    -2.05     |     14.8     |
| 콜 진입  | 20231204-104500 | 337.4  |    1     |  0.0   |    0     |     0.0      |     14.8     |
| 이평청산 | 20231204-144500 | 337.4  |    0     | 336.85 |    1     |    -0.55     |    14.25     |
| 콜 진입  | 20231204-151500 | 337.15 |    1     |  0.0   |    0     |     0.0      |    14.25     |
| 이평청산 | 20231205-091500 | 337.15 |    0     | 333.75 |    1     |     -3.4     |    10.85     |
| 콜 진입  | 20231214-091500 | 342.2  |    1     |  0.0   |    0     |     0.0      |    10.85     |
|  TS청산  | 20240103-154500 | 342.2  |    0     | 353.6  |    1     |     11.4     |    22.25     |
| 콜 진입  | 20240125-141500 | 335.35 |    1     |  0.0   |    0     |     0.0      |    22.25     |
| 이평청산 | 20240126-091500 | 335.35 |    0     | 334.25 |    1     |     -1.1     |    21.15     |
| 콜 진입  | 20240126-094500 | 335.95 |    1     |  0.0   |    0     |     0.0      |    21.15     |
|  TS청산  | 20240130-114500 | 335.95 |    0     | 339.0  |    1     |     3.05     |     24.2     |
| 콜 진입  | 20240201-101500 | 340.25 |    1     |  0.0   |    0     |     0.0      |     24.2     |
|  TS청산  | 20240205-101500 | 340.25 |    0     | 345.45 |    1     |     5.2      |     29.4     |
| 콜 진입  | 20240216-131500 | 355.15 |    1     |  0.0   |    0     |     0.0      |     29.4     |
|  TS청산  | 20240220-094500 | 355.15 |    0     | 358.35 |    1     |     3.2      |     32.6     |
| 콜 진입  | 20240220-151500 | 356.65 |    1     |  0.0   |    0     |     0.0      |     32.6     |
| 이평청산 | 20240221-124500 | 356.65 |    0     | 355.1  |    1     |    -1.55     |    31.05     |
| 콜 진입  | 20240222-104500 | 357.1  |    1     |  0.0   |    0     |     0.0      |    31.05     |
| 이평청산 | 20240222-121500 | 357.1  |    0     | 357.35 |    1     |     0.25     |     31.3     |
| 콜 진입  | 20240222-134500 | 357.65 |    1     |  0.0   |    0     |     0.0      |     31.3     |
|  TS청산  | 20240223-101500 | 357.65 |    0     | 360.1  |    1     |     2.45     |    33.75     |
| 콜 진입  | 20240308-094500 | 362.65 |    1     |  0.0   |    0     |     0.0      |    33.75     |
|   손절   | 20240311-091500 | 362.65 |    0     | 359.75 |    1     |     -2.9     |    30.85     |
| 최종평가 |     20240315    |  0.0   |    0     |  0.0   |    0     |     0.0      |    30.85     |
+----------+-----------------+--------+----------+--------+----------+--------------+--------------+
일자: 20230404~20240315
총수익(pt): 50.85, 총손실(pt): -20.0, 최대연속손실(pt): -7.55
수익/진입 횟수: 13 / 23, 승율: 56.52%, 손익비: 2.54
최종평가손익(pt): 30.85
최종평가손익(원): 7,712,500
'''
