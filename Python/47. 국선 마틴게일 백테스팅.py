import asyncio
import time
import os.path
import ebest
from common import *
from app_keys import appkey, appsecretkey, stock_dir # app_keys.py 파일에 appkey, appsecretkey 변수를 정의하고 사용하세요
# stock_dir 변수에 저장할 디렉토리를 설정하세요. (ex. stock_dir = 'C:/stockdata')

import pandas as pd

'''
그리드 매매

1. 선물종목 및 차트데이터
    코스피200 연결지수선물 1계약 기준, 1분봉 데이터
    
2. 진입조건
    - 콜/풋 모두 진입
    - 시가대비 설정된 포인트 마다 2배율로 추가 진입 (역추세)
    ex: 시가 300.00, 설정포인트 5pt, 1차진입 305.00 : 1계약 풋, 2차진입 310.00 2계약 풋 추가, 3차진입 315.00, ...
    
3. 청산 조건
    - 마지막 진입 포인트 대비 설정된 포인트에 도달시 청산
    - 장마감시 전량 청산 (15:30)
    
'''

async def main():
    api=ebest.OpenApi()
    if not await api.login(appkey, appsecretkey): return print(f'연결실패: {api.last_message}')
    
    shcode = '90199999' # 기본값, 연결선물지수
    
    # 파일에서 데이터 불러온다
    fname = f'{stock_dir}/{shcode}_1분봉.csv'
    df = pd.DataFrame()
    if os.path.isfile(fname):
        df = pd.read_csv(fname, encoding='euc-kr')

    if len(df) == 0:
        # 1분봉 데이터를 불러올 수 있을때 까지 불러온다
        print(f'코스피200 연결선물 1분봉 데이터를 불러올 수 있을때 까지 불러옵니다...')
        df = await GetFutureStockMinuteChartData(api, shcode, 1, 100000)
        if len(df) > 0:
            ensure_save = input(f'코스피200 연결선물 1분봉 데이터를 {fname} 에 저장하시겠습니까? (y/n): ')
            if ensure_save.lower() == 'y':
                df.to_csv(fname, index=False, encoding='euc-kr')
                print(f'코스피200 연결선물 1분봉 데이터를 {fname} 에 저장하였습니다.')
    


    length = len(df)
    
    calc_df = pd.DataFrame()
    calc_df['시가'] = df['open']
    calc_df['고가'] = df['high']
    calc_df['저가'] = df['low']
    calc_df['종가'] = df['close']
    calc_df['일자'] = df['date']
    calc_df['시간'] = df['time']

    while True:
        
        result_df = pd.DataFrame([], columns = ['진입명', '일자-시간', '진입가', '보유수량', '청산가', '청산수량', '청산손익(pt)', '누적손익(pt)'])
        그리드간격 = float(input('그리드간격(pt: ex 2): '))

        # 그리드간격 = 1 # 그리드간격 1pt
        누적손익 = 0
        보유수량 = 0
        진입가격 = 0
        평단가격 = 0
        진입횟수 = 0
        수익횟수 = 0
        수익누계 = 0
        손실누계 = 0
        진입당최대수익 = 0
        TS최대수익 = 0
        연속손실합계 = 0
        최대연속손실 = 0
        당일시가 = 0
        전일 = 0
        당일최종진입가 = 0
        마틴게일횟수 = 0
        청산가 = 0
        최대보유수량 = 0

        for i in range(0, length, 1):
            시가 = calc_df['시가'][i]
            고가 = calc_df['고가'][i]
            저가 = calc_df['저가'][i]
            종가 = calc_df['종가'][i]
            일자 = calc_df['일자'][i]
            시간 = int(calc_df['시간'][i])
            일자_시간 = f'{일자}-{시간}'
        
            if 전일 == 0: 전일 = 일자
            if 전일 != 일자: # 당일시가 갱신
                당일시가 = 시가
                전일 = 일자
                if 보유수량 > 0: # 전일 보유수량이 있으면 당일시가로 갱신
                    if 당일시가 < 당일최종진입가 - 그리드간격:
                        당일최종진입가 = 당일시가
                        진입횟수 += 1
                        진입가격 = 당일최종진입가
                        진입수량 = 1 #pow(2,마틴게일횟수)
                        평단가격 = (진입가격 * 진입수량 + 평단가격 * 보유수량) / (진입수량 + 보유수량)
                        보유수량 += 진입수량
                        if 보유수량 > 최대보유수량: 최대보유수량 = 보유수량
                        마틴게일횟수 += 1
                        result_df.loc[-1] = ['콜 진입', 일자_시간, 진입가격, 보유수량, 0, 0, 0, round(누적손익,2)]
                        result_df.index += 1
                        pass
                else:
                    당일최종진입가 = 당일시가
                # 평단가격 = 0
                # 마틴게일횟수 = 0
                # 보유수량 = 0
                
            if 당일최종진입가 == 0: continue

            if 보유수량 == 0:
                if 당일최종진입가 != 0:
                    진입당최대수익 = 0
                    TS최대수익 = 0
                    # 진입 조건 체크
                    while 저가 < 당일최종진입가 - 그리드간격:
                        # 신규 콜 진입
                        당일최종진입가 -= 그리드간격
                        진입횟수 += 1
                        진입가격 = 당일최종진입가
                        진입수량 = 1 #pow(2,마틴게일횟수)
                        평단가격 = (진입가격 * 진입수량 + 평단가격 * 보유수량) / (진입수량 + 보유수량)
                        보유수량 += 진입수량
                        if 보유수량 > 최대보유수량: 최대보유수량 = 보유수량
                        마틴게일횟수 += 1
                        result_df.loc[-1] = ['콜 진입', 일자_시간, 진입가격, 보유수량, 0, 0, 0, round(누적손익,2)]
                        result_df.index += 1
                        pass
            else:
                청산명 = None
                if 고가 > 평단가격 + 그리드간격: #당일최종진입가 + 그리드간격:
                    청산명 = '마틴게일청산'
                    청산가 = 평단가격 + 그리드간격 #당일최종진입가 + 그리드간격
                    당일최종진입가 = 청산가
                    청산손익 = (청산가 - 평단가격) * 보유수량
                    최대수익 = ((고가 if 보유수량 > 0 else 저가) - 진입가격) * 보유수량
                    if 최대수익 > 진입당최대수익: 진입당최대수익 = 최대수익
                
                # elif 시간 >= 153000: # 장마감시 전량청산
                #     청산가 = 종가
                #     청산손익 = (청산가 - 평단가격) * 보유수량
                #     청산명 = '장마감청산'
                #     청산손익 = (청산가 - 평단가격) * 보유수량
                #     최대수익 = ((고가 if 보유수량 > 0 else 저가) - 진입가격) * 보유수량
                #     if 최대수익 > 진입당최대수익: 진입당최대수익 = 최대수익
                

                if 청산명 is not None:
                    누적손익 += 청산손익
                    if 청산손익 > 0:
                        수익횟수 += 1
                        수익누계 += 청산손익
                        연속손실합계 = 0
                    else:
                        손실누계 += 청산손익
                        연속손실합계 += 청산손익
                        if 연속손실합계 < 최대연속손실: 최대연속손실 = 연속손실합계
                        
                    result_df.loc[-1] = [청산명, 일자_시간, 진입가격, 0, 청산가, 보유수량, round(청산손익, 2), round(누적손익,2)]
                    result_df.index += 1
                    보유수량 = 0
                    마틴게일횟수 = 0
                    
            # if 시간 >= 153000:
            #     당일최종진입가 = 0
            pass
    
        최종평가포인트 = 누적손익 + (calc_df['종가'][length-1] - 진입가격) * 보유수량
        if 보유수량 == 0: 진입가격 = 0

        # 출력
        result_df.loc[-1] = ['최종평가', calc_df['일자'][length-1], 진입가격, 보유수량, 0, 0, 0, round(최종평가포인트, 2)]
        result_df.index += 1
        print_table(result_df)
        
        print(f'일자: {calc_df['일자'][0]}~{calc_df['일자'][length-1]}')
        print(f'최대보유수량(계약): {최대보유수량}')
        print(f'총수익(pt): {round(수익누계, 2)}, 총손실(pt): {round(손실누계, 2)}, 최대연속손실(pt): {round(최대연속손실, 2)}')
        print(f'수익/진입 횟수: {수익횟수} / {진입횟수}, 승율: {round(수익횟수/진입횟수 * 100, 2)}%, 손익비: {( 0 if 손실누계 == 0 else round(수익누계 / (-손실누계), 2))}')
        print(f'최종평가손익(pt): {round(최종평가포인트, 2)}')
        print(f'최종평가손익(원): {int(최종평가포인트 * 250000):,}')
        print('')
        pass

   
    await api.close()


async def GetFutureStockMinuteChartData(api, code, ncnt, count):
    '''
    선물 차트 데이터 조회 함수
    api: ebest api 객체
    code: 선물 종목코드
    ncnt: 분봉주기 (1, 3, 5, 10, 15, 30, 45, 60)
    count: 조회할 데이터 건수
    gubun: 주기구분(2:일3:주4:월5:년), 기본값: 일
    return: DataFrame
    '''
    received_count = 0
    cts_date = ''
    cts_time = ''
    tr_cont = 'N'
    tr_cont_key = '0'
    all_data = []
    req_fram_count = 0
    while received_count < count:
        # 일봉 데이터 조회
        req_fram_count += 1
        print (f'[{code}] 차트요청중...{req_fram_count}')
        req_count = min(500, count - received_count)
        # [요청] t8415 : 선물/옵션챠트(N분)
        request = {
            "t8415InBlock": {
                "shcode": code, # 종목코드
                "ncnt": ncnt, # N분
                "qrycnt": req_count, # 요청건수
                "nday": "", # 요청일자
                "sdate": "",
                "stime": "",
                "edate": "99999999",
                "etime": "999999",
                "cts_date": cts_date,
                "cts_time": cts_time,
                "comp_yn": "N",
            },
        }
        response = await api.request("t8415", request, tr_cont = tr_cont, tr_cont_key = tr_cont_key)
        if not response:
            print(f'요청실패: {api.last_message}')
            break
        
        # 날짜, 시간, 시가, 고가, 저가, 종가, 거래량 데이터로 변환
        data = response.body.get('t8415OutBlock1', None)
        if data is None: break
        
        all_data = data + all_data
        received_count = len(all_data)
        if received_count >= count:
            break
        cts_date = response.body['t8415OutBlock']['cts_date']
        cts_time = response.body['t8415OutBlock']['cts_time']
        tr_cont = response.tr_cont
        tr_cont_key = response.tr_cont_key
        if tr_cont == 'N': break
        await asyncio.sleep(1)
        pass
    
    return pd.DataFrame([list((x['date'], x['time'], float(x['open']), float(x['high']), float(x['low']), float(x['close']), float(x['jdiff_vol']))) for x in all_data]
                        , columns = ['date', 'time', 'open', 'high', 'low', 'close', 'volume'])

asyncio.run(main())

# Output:
'''
코스피200 연결선물 30분봉 데이터를 불러올 수 있을때 까지 불러옵니다...
[90199999] 차트요청중...1
[90199999] 차트요청중...2
[90199999] 차트요청중...3
[90199999] 차트요청중...4
[90199999] 차트요청중...5
[90199999] 차트요청중...6
[90199999] 차트요청중...7
Row Count = 47
+----------+-----------------+--------+----------+--------+----------+--------------+--------------+
|  진입명  |    일자-시간    | 진입가 | 보유수량 | 청산가 | 청산수량 | 청산손익(pt) | 누적손익(pt) |
+----------+-----------------+--------+----------+--------+----------+--------------+--------------+
| 콜 진입  | 20230328-100000 | 315.6  |    1     |  0.0   |    0     |     0.0      |     0.0      |
| 이평청산 | 20230406-143000 | 315.6  |    0     | 319.35 |    1     |     3.75     |     3.75     |
| 콜 진입  | 20230407-110000 | 324.8  |    1     |  0.0   |    0     |     0.0      |     3.75     |
| 이평청산 | 20230418-143000 | 324.8  |    0     | 334.15 |    1     |     9.35     |     13.1     |
| 콜 진입  | 20230418-154500 | 335.15 |    1     |  0.0   |    0     |     0.0      |     13.1     |
| 이평청산 | 20230420-130000 | 335.15 |    0     | 334.45 |    1     |     -0.7     |     12.4     |
| 콜 진입  | 20230511-110000 | 328.15 |    1     |  0.0   |    0     |     0.0      |     12.4     |
| 이평청산 | 20230511-123000 | 328.15 |    0     | 327.95 |    1     |     -0.2     |     12.2     |
| 콜 진입  | 20230526-113000 | 337.75 |    1     |  0.0   |    0     |     0.0      |     12.2     |
| 이평청산 | 20230601-150000 | 337.75 |    0     | 338.45 |    1     |     0.7      |     12.9     |
| 콜 진입  | 20230602-103000 | 340.95 |    1     |  0.0   |    0     |     0.0      |     12.9     |
| 이평청산 | 20230608-153000 | 340.95 |    0     | 342.3  |    1     |     1.35     |    14.25     |
| 콜 진입  | 20230609-093000 | 346.1  |    1     |  0.0   |    0     |     0.0      |    14.25     |
| 이평청산 | 20230615-100000 | 346.1  |    0     | 347.0  |    1     |     0.9      |    15.15     |
| 콜 진입  | 20230731-091500 | 347.1  |    1     |  0.0   |    0     |     0.0      |    15.15     |
|  TS청산  | 20230802-111500 | 347.1  |    0     | 348.45 |    1     |     1.35     |     16.5     |
| 콜 진입  | 20230828-101500 | 331.95 |    1     |  0.0   |    0     |     0.0      |     16.5     |
|  TS청산  | 20230830-154500 | 331.95 |    0     | 334.75 |    1     |     2.8      |     19.3     |
| 콜 진입  | 20231017-121500 | 328.75 |    1     |  0.0   |    0     |     0.0      |     19.3     |
|   손절   | 20231019-091500 | 328.75 |    0     | 324.6  |    1     |    -4.15     |    15.15     |
| 콜 진입  | 20231109-114500 | 326.8  |    1     |  0.0   |    0     |     0.0      |    15.15     |
| 이평청산 | 20231110-091500 | 326.8  |    0     | 323.4  |    1     |     -3.4     |    11.75     |
| 콜 진입  | 20231114-094500 | 328.25 |    1     |  0.0   |    0     |     0.0      |    11.75     |
| 이평청산 | 20231124-141500 | 328.25 |    0     | 335.55 |    1     |     7.3      |    19.05     |
| 콜 진입  | 20231128-111500 | 337.0  |    1     |  0.0   |    0     |     0.0      |    19.05     |
|   손절   | 20231129-094500 | 337.0  |    0     | 334.95 |    1     |    -2.05     |     17.0     |
| 콜 진입  | 20231204-104500 | 337.4  |    1     |  0.0   |    0     |     0.0      |     17.0     |
| 이평청산 | 20231204-144500 | 337.4  |    0     | 336.85 |    1     |    -0.55     |    16.45     |
| 콜 진입  | 20231204-151500 | 337.15 |    1     |  0.0   |    0     |     0.0      |    16.45     |
| 이평청산 | 20231205-091500 | 337.15 |    0     | 333.75 |    1     |     -3.4     |    13.05     |
| 콜 진입  | 20231214-091500 | 342.2  |    1     |  0.0   |    0     |     0.0      |    13.05     |
| 이평청산 | 20240104-101500 | 342.2  |    0     | 351.25 |    1     |     9.05     |     22.1     |
| 콜 진입  | 20240125-141500 | 335.35 |    1     |  0.0   |    0     |     0.0      |     22.1     |
| 이평청산 | 20240126-091500 | 335.35 |    0     | 334.25 |    1     |     -1.1     |     21.0     |
| 콜 진입  | 20240126-094500 | 335.95 |    1     |  0.0   |    0     |     0.0      |     21.0     |
|  TS청산  | 20240131-091500 | 335.95 |    0     | 336.5  |    1     |     0.55     |    21.55     |
| 콜 진입  | 20240201-101500 | 340.25 |    1     |  0.0   |    0     |     0.0      |    21.55     |
| 이평청산 | 20240215-091500 | 340.25 |    0     | 354.85 |    1     |     14.6     |    36.15     |
| 콜 진입  | 20240216-131500 | 355.15 |    1     |  0.0   |    0     |     0.0      |    36.15     |
|  TS청산  | 20240220-104500 | 355.15 |    0     | 356.5  |    1     |     1.35     |     37.5     |
| 콜 진입  | 20240220-151500 | 356.65 |    1     |  0.0   |    0     |     0.0      |     37.5     |
| 이평청산 | 20240221-124500 | 356.65 |    0     | 355.1  |    1     |    -1.55     |    35.95     |
| 콜 진입  | 20240222-104500 | 357.1  |    1     |  0.0   |    0     |     0.0      |    35.95     |
| 이평청산 | 20240222-121500 | 357.1  |    0     | 357.35 |    1     |     0.25     |     36.2     |
| 콜 진입  | 20240222-134500 | 357.65 |    1     |  0.0   |    0     |     0.0      |     36.2     |
|  TS청산  | 20240223-101500 | 357.65 |    0     | 360.1  |    1     |     2.45     |    38.65     |
| 최종평가 |     20240307    |  0.0   |    0     |  0.0   |    0     |     0.0      |    38.65     |
+----------+-----------------+--------+----------+--------+----------+--------------+--------------+
일자: 20230327~20240307
총수익(pt): 55.75, 총손실(pt): -17.1, 최대연속손실(pt): -7.55
수익/진입 횟수: 14 / 23, 승율: 60.87%, 손익비: 3.26
최종평가손익(pt): 38.65
최종평가손익(원): 9,662,500
'''
